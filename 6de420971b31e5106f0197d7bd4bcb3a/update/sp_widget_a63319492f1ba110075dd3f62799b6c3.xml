<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($rootScope, $scope, $timeout, $location, $log, $window, spUtil, nowAttachmentHandler, spAriaUtil, spNavStateManager) {
    var bc = [];
    if ($scope.data.request)
        bc[bc.length] = {
            label: $scope.data.request.name,
            url: $scope.data.request.url
        };
    bc[bc.length] = {
        label: 'Record',
        url: '#'
    };
    $rootScope.$broadcast('sp.update.breadcrumbs', bc);
    spUtil.setSearchPage('sc');
    $scope.submitting = false;
    $scope.mandatory = [];
    $scope.errorMessages = [];
    $scope.data.show_sql = false;
    $scope.saveButtonSuffix = spUtil.getAccelerator('s');
    $scope.isPageReady = false;
    $scope.embeddedInModal = false;
    $scope.adminMenu = {
        encodedPageUrl: encodeURIComponent($location.url()),
        getClientScriptCount: function() {
            var count = 0;
            if ($scope.data.f.client_script) {
                count += $scope.data.f.client_script.onChange.length;
                count += $scope.data.f.client_script.onLoad.length;
                count += $scope.data.f.client_script.onSubmit.length;
            }
            return count;
        }
    };
    var tableId = $scope.data.sys_id != -1 ? $scope.data.sys_id : ($scope.data.f ? $scope.data.f._attachmentGUID : -1);
    spUtil.recordWatch($scope, "sys_attachment", "table_sys_id=" + tableId, function(response, data) {
        $scope.attachmentHandler.getAttachmentList();
        if (response.data) {
            var options = {};
            options.operation = response.data.operation;
            options.filename = response.data.display_value;
            options.sys_id = tableId;
            options.table = $scope.data.table;
            options.state = (response.data.record && response.data.record.state) ? response.data.record.state.value : "";
            if (options.operation === 'update' && options.state === 'not_available')
                $rootScope.$broadcast("attachment.updated", options);
        }
    });

    $rootScope.$on('$sp.html.editor.progress', function(e, conf) {
        $scope.submitting = conf.state;
    });

    $scope.getButtonClass = function(action) {
        if (action.form_style == "destructive")
            return "btn-danger";

        if (action.form_style == "primary")
            return "btn-primary";

        return "btn-default";
    };
    $scope.cancel = function() {
        $rootScope.$emit('sp.ReferenceFieldModal.dismiss');
    };

    $scope.getUIActions = function(type) {
        if ($scope.data.disableUIActions)
            return [];
        if (type) {
            return $scope.data.f._ui_actions.filter(function(action) {
                //We handle the primary action button separately.
                return !action.primary && action['is_' + type];
            });
        } else {
            return $scope.data.f._ui_actions;
        }
    }

    $scope.getPrimaryAction = function() {
        var primaryActions = $scope.data.f._ui_actions.filter(function(action) {
            return action.primary;
        });
        return (primaryActions.length) ? primaryActions[0] : null;
    }

    $scope.getUIActionContextMenu = function(event) {
        var menu = [];
        if (event.ctrlKey)
            return menu;

        var contextActions = $scope.getUIActions('context');
        contextActions.forEach(function(action) {
            menu.push([action.name, function() {
                $scope.triggerUIAction(action);
            }]);
        });

        if (contextActions.length > 0)
            menu.push(null);
        menu.push([$scope.data.exportPDFMsg, function() {
            exportPDF("");
        }]);
        menu.push([$scope.data.exportPDFLandMsg, function() {
            exportPDF('true');
        }]);

        return menu;
    }

    function exportPDF(landscape) {
        $window.open("/" + $scope.data.f.table + ".do?PDF&landscape=" + landscape + "&sys_id=" + $scope.data.sys_id + "&sysparm_view=" + $scope.data.f.view);
    }

    //trigger the primary UI Action on save (if there is one)
    var deregister = $scope.$on('$sp.save', function() {
        var primaryAction = $scope.getPrimaryAction();
        if (primaryAction)
            $scope.triggerUIAction(primaryAction);
    });
    $scope.$on('$destroy', function() {
        deregister()
    });

    $scope.triggerUIAction = function(action) {
        if ($scope.data.disableUIActions && !action.primary) {
            return;
        }

        var activeElement = document.activeElement;
        if (activeElement) {
            activeElement.blur();
        }

        $scope.$evalAsync(function() {
            if (g_form) {
                $scope.submitting = true;
                if (!g_form.submit(action.action_name || action.sys_id))
                    $scope.submitting = false;
            }
        });
    }

    $scope.$on("spModel.uiActionComplete", function(evt, response, savedFormSysId) {
        if (!response.isInsert && ($scope.data.sys_id !== savedFormSysId))
            return;

        $scope.submitting = false;
        if (response.isActionAborted)
            return;

        var sysID = (response.isInsert) ? response.sys_id : $scope.data.sys_id;
        loadForm($scope.data.table, sysID).then(constructResponseHandler(response));
    });

    function constructResponseHandler(response) {
        return function() {
            $rootScope.$broadcast("sp.form.submitted", {
                sys_id: (response.isInsert) ? response.sys_id : $scope.data.sys_id
            });
            var message;
            var eventName = "sp.form.record.updated";
            if (response.isInsert) {
                message = $scope.data.recordAddedMsg;
                var search = $location.search();
                search.sys_id = response.sys_id;
                search.spa = 1;
                $location.search(search).replace();
            } else
                message = $scope.data.updatedMsg;

            $scope.data.hideRelatedLists = hideRelatedLists();
            $scope.$emit(eventName, $scope.data.f._fields, $scope.data.sys_id);
            $rootScope.$broadcast(eventName, $scope.data.f._fields, $scope.data.sys_id);
            $scope.status = message;
            spUtil.addTrivialMessage(message);
            spUtil.simulateFakeFormSubmitForAutoComplete('widget-form', $scope.data.f._fields);
            $timeout(clearStatus, 2000);
        }
    }

    var ctrl = this;
    // switch forms
    var unregister = $scope.$on('$sp.list.click', onListClick);
    $scope.$on("$destroy", function() {
        unregister();
    })

    function _save() {
        var primaryAction = $scope.getPrimaryAction();
        if (primaryAction)
            $scope.triggerUIAction(primaryAction);
    }

    function onListClick(evt, arg) {
        loadForm(arg.table, arg.sys_id);
    }

    function loadForm(table, sys_id) {
        var f = {};
        $scope.data.table = f.table = table;
        $scope.data.sys_id = f.sys_id = sys_id;
        f.view = $scope.data.view;
        return $scope.server.update().then(setupAttachmentHandler);
    }

    function openRelatedList(e, queryString) {
        // todo: Open this in a modal
        $location.search(queryString);
        e.preventDefault();
    }

    $scope.$on('spModel.fields.rendered', function() {
        if (ctrl.panels)
            ctrl.panels.removeClass('shift-out').addClass('shift-in');
    });

    var g_form;

    function initForm(gFormInstance) {
        $scope.$evalAsync(function() {
            if ($('#widget-form').parents('.modal').length)
                $scope.embeddedInModal = true;
        })

        if (gFormInstance.getTableName() == $scope.data.f.table) {
            g_form = gFormInstance;
            spNavStateManager.register($scope.data.table, _save, g_form);
            $scope.isPageReady = true;
            $timeout(function() {
                $rootScope.$emit('spModel.gForm.rendered', g_form);
            }, 175);
        }
    }

    $scope.$on('spModel.gForm.initialized', function(e, gFormInstance) {
        initForm(gFormInstance);
    });

    $scope.$on('spModel.gForm.env.created', function(e, gFormInstance) {
        initForm(gFormInstance);
    });

    // update the comments or worknotes based on activity stream
    $scope.$on("activity_stream_is_changed", function(event, data) {
        if (g_form && g_form.hasField(data.fieldName)) {
            g_form.setValue(data.fieldName, data.input);
            if (data.fieldToClear != "" && g_form.hasField(data.fieldToClear))
                g_form.setValue(data.fieldToClear, "");
        }
    })

    // Show or hide related lists
    $scope.$watch('data.f._related_lists', function() {
        $scope.data.hideRelatedLists = hideRelatedLists();
    }, true);

    $scope.hideDuplicateSaveAction = function(item) {
        if (!$scope.data.advancedUIEnabled)
            return true;
        return ($scope.data.advancedUIEnabled && item.sys_id !== "432ace8b0a0a0b34006b02832660c894" && item.sys_id !== "42e780d40a0a0b34007e0d4a52d33405");
    };

    function hideRelatedLists() {
        if (!$scope.data.f._related_lists)
            return true;
        if ($scope.options.hideRelatedLists == true)
            return true;
        if ($scope.data.sys_id == '-1')
            return true;
        // If all related lists are visible=false then hide
        if ($scope.data.f._related_lists.length > 0) {
            for (var i in $scope.data.f._related_lists) {
                var list = $scope.data.f._related_lists[i];
                if (list.visible) {
                    return false;
                }
            }
        }
        return true;
    }

    function clearStatus() {
        $scope.status = "";
    }

    function setupAttachmentHandler() {
        $scope.attachmentHandler = new nowAttachmentHandler(appendDone, appendError);

        $scope.$evalAsync(function() {
            $scope.attachmentHandler.setParams($scope.data.table, $scope.data.f._attachmentGUID, 1024 * 1024 * $scope.data.maxAttachmentSize);
        });

        $scope.$on('dialog.upload_too_large.show', function(e) {
            $log.error($scope.data.largeAttachmentMsg);
            spUtil.addErrorMessage($scope.data.largeAttachmentMsg);
        });
    }
    setupAttachmentHandler();

    function appendDone() {
        // don't know here whether upload succeeded, so can't show msg either way
        $scope.$broadcast("sp.attachments.update", $scope.data.f._attachmentGUID);
        spUtil.retrieveSessionMessages();
    }

    function appendError(error) {
        $scope.errorMessages.push(error);
        spUtil.addErrorMessage(error.msg + error.fileName);
    }

    if ($scope.data.f.title) {
        $scope.$emit('sp.widget-modal.set-aria-label', $scope.data.f.title);
    }
}]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>my_task</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>My Task</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[// form functionality - URL parameter driven
(function($sp, input, data, options, gs) {
  /* "use strict"; -linter issues */
  // populate the 'data' variable
	data.attachmentUploadSuccessMsg = gs.getMessage("Attachment upload was successful");
	data.recordAddedMsg = gs.getMessage("Record Added");
	data.updatedMsg = gs.getMessage("Record Updated");
	data.exportPDFMsg = gs.getMessage("Export to PDF");
	data.exportPDFLandMsg = gs.getMessage("Export to PDF (landscape)");
	data.addAttachmentMsg = gs.getMessage("Add an attachment");
	data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
	data.advancedUIEnabled = (gs.getProperty("glide.ui.advanced") == "true");
	data.closeWindowMsg = gs.getMessage("Close Window");
	if (isNaN(data.maxAttachmentSize))
		data.maxAttachmentSize = 24;
	data.largeAttachmentMsg = gs.getMessage("Attached files must be smaller than {0} - please try again", "" + data.maxAttachmentSize + "MB");
	
	data.isAdmin = gs.hasRightsTo('sp/configure.all/execute', null);
	data.emptyStateTemplate = options.empty_state_template;
	var isPopup = false;

	if (input) {
		data.table = input.table;
		data.sys_id = input.sys_id;
		data.view = input.view;
		var result = {};
		if (input._fields) {
			result = $sp.saveRecord(input.table, input.sys_id, input._fields);
			data.sys_id = result.sys_id;
		}

		if (input.sys_id == '-1')
			data.isNewRecord = true;
		if (input.isPopup === true)
			isPopup = true;
	} else {
		data.table = options.table || $sp.getParameter("t") || $sp.getParameter("table") || $sp.getParameter("sl_table");
		data.sys_id = options.sys_id || $sp.getParameter("sys_id") || $sp.getParameter("sl_sys_id");
		if(data.table == 'x_1027446_case_m_0_my_task'){
		data.request = {
			name: 'Task Details',
			url: '?id=my_task'
		}
	}
	
		if (!data.sys_id && options.sys_id_required != "true")
			data.sys_id = "-1";
		data.view = options.view || $sp.getParameter("view") || $sp.getParameter("v"); // no default
	}

  	if (isPopup && gs.getProperty("glide.service_portal.reference.use_sys_popup_view", "false") == "true") {
		options.hideRelatedLists = true;
		options.disableUIActions = "true";
	}
	data.hideRelatedLists = options.hideRelatedLists || false;
	data.disableUIActions = options.disableUIActions === "true";
  
	data.query = $sp.getParameter("query") || options.query || "";
	data.f = {};
	if (!data.table)
		return;
	
	// Form widget is not a supported way to view an attachment
	if (data.table == "sys_attachment") {
		data.tableUnsupported = true;
		return;
	}

	/*if (!GlideTableDescriptor.isValid(data.table))
		return;*/

	if (!data.sys_id)
		return;

	var rec = $sp.getRecord(data.table, data.sys_id);

 	if (data.sys_id != "-1" && !rec.canRead())
		return; // can't see requested record
	
	if (data.sys_id == "-1" && !rec.canCreate())
		return; // can't create a new record
	
	data.isValid = rec.isValid() || data.sys_id == "-1";
	if (!data.isValid)
		return;

	data.table = rec.getRecordClassName();
	data.tableHierarchy = GlideDBObjectManager.getTables(data.table).toArray().join();
	data.canWrite = rec.canWrite();
	var hasRecordAccess = data.sys_id == "-1" ? rec.canCreate() : data.canWrite;
	data.canAttach = !options.omitAttachmentButton && hasRecordAccess && gs.hasRole(gs.getProperty('glide.attachment.role'))/* && !GlideTableDescriptor.get(data.table).getED().getBooleanAttribute("no_attachment")*/;
	data.f = $sp.getForm(data.table, data.sys_id, data.query, data.view, isPopup);

	// PRB1335036: show appropriate message when record is in cross app scope
	data.f.outOfScope = !rec.isInSelectedScope();
	// Populate scope labels only when needed
	if (data.f.outOfScope) {
		data.f.recordScopeLabel = gs.getScopeLabelByRecordId(rec.getUniqueValue());
		data.f.currentScopeLabel = gs.getCurrentApplicationName();
	}
	
	// Activity formatter is hardcoded to set specific options
	for (var f in data.f._formatters) {
		var fm = data.f._formatters[f];
		if (fm.formatter == "activity.xml") {
			fm.hardcoded = true;
			fm.widgetInstance = $sp.getWidget('widget-ticket-conversation',
																{table: data.table,
																 sys_id: data.sys_id,
																 includeExtended: true,
																 hideAttachmentBtn: true,
																 title: "${Activity}",
																 use_dynamic_placeholder: true,
																 btnLabel: "${Post}"});
		} else if(fm.formatter == "com_glideapp_servicecatalog_veditor" || fm.formatter == "com_glideapp_questionset_default_question_editor") {
			var qsConfig = $sp.getValue('quick_start_config');
			if (qsConfig)
				qsConfig = JSON.parse(qsConfig)[0];
			fm.widgetInstance = $sp.getWidget(fm.widget, {table: data.table,
														sys_id: data.sys_id,
														readonly_variable_editor: qsConfig ? qsConfig.readonly_variable_editor : 'false'});
		} else
			fm.widgetInstance = $sp.getWidget(fm.widget, data);
	}
})($sp, input, data, options, gs);]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-06 10:06:59</sys_created_on>
        <sys_id>a63319492f1ba110075dd3f62799b6c3</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>My Task</sys_name>
        <sys_package display_value="Case Management" source="x_1027446_case_m_0">6de420971b31e5106f0197d7bd4bcb3a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Case Management">6de420971b31e5106f0197d7bd4bcb3a</sys_scope>
        <sys_update_name>sp_widget_a63319492f1ba110075dd3f62799b6c3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-06-08 14:04:02</sys_updated_on>
        <template><![CDATA[<div>
<!-- your widget template -->
  <h1>My Task Details</h1>
  <p>You will get task details</p>
  
  <table>
    <tr>
      <th>Number</th>
      <th>short Description</th>
      <th>Assignment Group</th>
    </tr>
    <tr ng-repeat="key in data.Inc">
    <td>{{key.number}}</td>
    <td>{{key.short_description}}</td>
    <td>{{key.assignment_group}}</td>
    </tr>
    
  </table>
  
</div>]]></template>
    </sp_widget>
</record_update>
